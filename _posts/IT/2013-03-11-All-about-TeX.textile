---
layout: indexed
title: TeX 傳統版式寫作的曲折道路（吐血文威力加強白金限量版，慎入）
tags:
- 電腦
categories:
- 挨踢
---
（文章動筆於 2013/02/25 ）
本文的主題是用 TeX 來進行傳統版式寫作，分析一下成分，首先是「寫作」而不是單純的排版，其次所寫內容排出來是傳統版式的。鑒於這個特殊到變態的需求，使用 TeX 或至少 TeX like 軟件是必然的。每個人需求不同，取捨也不同。我會從我的角度來讚揚 TeX ，吐槽其他，一切吐槽不具有普遍性。
本文書寫重點是網絡上較少談到，或較少以我能正常閱讀的文字爲載體討論的。本文某些部分會摻入一些 TeX 的 tips 或者 links ——原則上所有 tips 都是原創的。

本文的不適宜人群：
一、沒有開源軟件使用經驗的
二、沒有耐心的
三、沒有獨特美學價值的
四、思想過於正常的
五、熱愛 Microsoft Word 或 Adobe InDesign 的
六、對吐槽沒有耐受性的
七、打算直接通過本文入門 TeX 的
七點五、 Mac 用戶——抱歉我完全把 Mac 相關的東西忽略了，因爲我從來都用 PC

h2. 缺點

個人認爲，介紹一款軟件不應從優點說起，而是缺點。因爲受眾先瞭解了缺點，就能很快知道自己是否不適合該軟件，從而及時放棄。所以我們先來說缺點。不過這裏僅僅羅列我個人認爲是缺點的，如果讀者認爲 WYTIWYG 也算缺點，最好不要看本站任何一篇有關電腦的文章。

h3. 該死的學習曲線

像 Word 那樣，一個半文盲民工打開軟件，打了一段話，然後點點鼠標，就能排出點什麼東西，有時看看還挺複雜。這是商業軟件的特點，一開始總給你一點美好憧憬，到你習慣了、捨不得丟開了，纔知道有多難。
TeX 就不能這樣，什麼文檔也不讀的話，最簡單的東西都不能排。

h3. 麻煩

TeX 的囉嗦程度不略小於 html 。但事實上我更常用 html ，而非 TeX 。爲什麼？
首先， html 不存在編譯問題，開頭、結尾聲明不錯就行。 TeX 則涉及命令定義和宏包等問題，較複雜，失敗率高。
其次，雖然 html 和 TeX 語言都有點囉嗦，但 html 有簡化的 markdown 和 textile ，而 TeX 沒有。
所以本文還是用 textile 上傳後自動轉 html 的方式來撰寫，而非寫 TeX 手動編譯爲 PDF 或 html 再上傳的方式。反正我不寫公式。

h3. 一切皆 beta

對於很多商業軟件，比如同類型的方正書版，或結果相同的 Adobe InDesign ，再或毫無干系但常有人拿來對比的 Office ，他們都有一個特點，那就是，從某個版本起，就有一種較穩定的感覺了。方正書版，現在很多人還在用上世紀的版本；而 Office ，使用 2003 和 2007 的非常多，而 2010 和 2013 的用戶反而是少數。 Adobe InDesign 也不是那麼急着更新。爲什麼呢？穩定了，也就不追求升級了。
但這在 TeX 世界完全不可行。就說中文好了，十年前還在 CCT ，後來 CJK ，現在 ConTeXt 或 XeTeX 或 pTeX ，以後大概是 LuaTeX 。基本上知識三年內要大更新一次。就像很多母程序猿的抱怨一樣：生完小猿回來，什麼都不會了。公程序猿如果休假長一點，大概也會這樣。
特別是中文直排這種小眾需求，你總是會希望比如 LuaTeX-ja 能多用點 Omega 的成果從而支持直排，或者日本人去擴展一下 XeTeX ，變成 pXeTeX 之類以解決直排標點問題。等等。

h3. 永遠有那麼一點點區別

TeX 可以排得很美，但低手也可以排得比 Word 還醜。美醜之間是一些初學者不容易掌握的細微設置和環境差異。
我們在網上看到別人一個極美觀的排版時，千萬不要過度雞凍，因爲我們排不出那個美好感覺的可能性是 99% ——除非你能把對方的環境和設置完美 copy 到自己電腦裏。有點差別還算是好情況了，更糟的是編譯失敗……

h3. 坑爹的環境，龐雜的體系

TeX 是開源軟件體系。開源軟件已經夠坑爹了，而「開源軟件體系」有多坑爹，可想而知。
隨便一個可運行的 TeX 環境，安裝後文件數量都上萬，體積當然也不小，一般在 200MB 到 3000MB 這個區間，安裝時間通常在半小時以上。對於單文件綠色版 Office 的用戶來說，無疑是痛苦的。
都是 TeX 的子孫，但是光說幾個比較新的，從 XeTeX 到 ConTeXt 到 LuaTeX 的區別太大了，很多宏包無法互通，自己寫命令的時候也要很小心。
更該死的是，很多在模版製作過程中需要的文檔並不是那麼好找，或者找到了發現不是英文的，再或者根本沒文檔。
很多人都說 TeX 很難。基本上一般人說 TeX 很難的有兩種：第一種是電腦智商太低，估計叫他寫個 html 都夠嗆，這種人就跟說解一元一次方程很難一樣，智商低我有什麼辦法呢，他用用 Office 不就好了，根本沒必要也不可能使用高精度排版軟件嘛。第二種是寫個 html 完全無壓力，但看見 TeX 就敗了。這種人如果要求不高，用方正書版是可以的。方正書版是閉源商業軟件，且在國內具有統治地位，文檔不用多，讀精一兩本就是高手，所以不難學。當然要求高的還是該學 TeX ，特別是看看小鬼子的宏包和樣張。

h3. 中文、中式排版資源匱乏

中國人缺乏鑽研精神，對美的要求也不高，所以 TeX 的中文資源相對比較少。
由於 TeX 是針對西方語言編寫的，對傳統的中式排版並非先天支持，這本來需要一個強大的本地社區，偏偏這社區很弱小。所以排 TeX 是個苦差。

h2. 什麼不是學習和使用 TeX 的理由

h3. 爲幾個破式子或化學結構式學 TeX

Word 2007 開始支持 TeX 式的公式輸入。化學用 ChemDraw 。

h3. 簡單的短文件

Word 足矣。割雞焉用牛刀？
當然我個人是不用 Word 的，除非要打印或對方要求。

h3. 無規律複雜文檔

如果你要排板報、書籍封面等花式較多且規律性比較弱的東西，用 InDesign, PhotoShop, Microsoft Visio, 方正飛騰即可，不要到 TeX 下折騰。事倍功半。

h3. 任何其他軟件能完美實現並便捷修改的

比如中文直排，如果你不像我一樣需要一大堆複雜的規則化板式，如眉批、夾批、夾注、書耳之類，而僅僅是要一個最簡單的直排，何必 TeX 呢。 TeX 的學習成本是最高的，沒必要。

h2. 用戶條件

TeX 主要是給研究人員用的，本文討論的又是複雜的中/日式排版（ frankly speaking ，我要實現的東西更像日式排版），自然更加難排，所以對用戶也是有點條件的。
一、無障礙閱讀英文科技短文（必須）
二、耐心（必須）
三、少量編程經驗（非必須，但到了一定程度還是需要）
四、對編碼、字體有基本瞭解（要弄點字體則必須）
五、開源軟件及系統安裝及設置經驗（幾乎必須，因爲 TeX 的鼓搗過程跟這個很像）
六、打字速度較快（非必須，但如太慢，實際使用並不哈皮）
七、有一款得心應手的文本編輯器（非必須，也許用了 TeX 就找到了，不過如果始終找不到， TeX 之路容易不暢）
八、初中平面幾何無不及格記錄（非必須，但如果想弄點複雜的東西， rotatebox 命令、 geometry 宏包或類似都東西一來，估計夠嗆）
九、腦袋從未被驢踢過或門夾過（必須，比如有人堅持認爲在 InDesign 裏一個一個加樣式比用文本編輯器批量替換容易）
順帶說一下，雖然我不認爲 TeX 太難，不過臺灣有個叫侯捷的程序猿，因覺得 TeX 很難，就用 Word ，還出了一本叫「 Word 排版藝術」的書。 Word 當然不能排版，自然也無藝術可言，不過這也從一個側面說明 TeX 並非人人可以輕易掌握。

h2. 優點

如果還沒嚇退讀者，這位讀者必定心靈堅強，對美有自己的追求，九成以上可能性是研究生/博士生/研究機構人員/獨立研究員/有計畫從事研究的大學生/出版業工作者/電腦狂人，這些人多數都符合條件，可以瞭解一下 TeX 的優點並考慮使用。

h3. 善於處理巨著

我們都知道 Word 處理長篇文檔時多麼不可愛。 TeX 的文件都是文本文檔，而且你可以做成一章一個文件，然後整體一起編譯。
不過換句話說，排一兩頁臨時文件沒必要使用 TeX ，排長篇且比較挑剔的再 TeX 。

h3. 遠離版權糾紛

前面提到的其他軟件都是商業軟件，要錢的。如果你是學生或者居住在中國當然無所謂，但若跑到美國去做研究，至少美國盜版軟件是有風險的。
不過別用商業字體文件，還有如果你的文本編輯器和作圖軟件是商業軟件我也沒辦法。

h3. 高精度

TeX 本來就是一個挑剔強迫症患者主持開發的，所以適合高精度排版。軟件設計的時候，精度爲 sp ，什麼概念呢， 65536 sp = 1 pt 。
不過要小心的是現在中國出的宏包一般精度達不到出版級別，建議看日本的。
Office 做不到 TeX 的精度， InDesign 做得到但一般用戶也不可能做到。

h3. 祕書式人機交互

假設你寫了一本曠世巨著，叫你的祕書做成 PDF ，你會怎麼說？
你肯定這麼說的：呐，把大章節給我用一號字、黑體，小章節用三號字、黑體、下劃線，正文用四號字、宋體，奇數頁用大章节標題做頁眉，偶數頁用書名，章節末尾如果是奇數頁就加一頁空白，後面做個人名索引，前面做個目錄，還有參考文獻幫我用 MLA 格式整理一下。
於是祕書打開他的 Word 或者 InDesign ，想着你的吩咐，先把全文設置成四號宋體，然後找到第一章，改成一號黑體，再找到第一章第一節，改成三號黑體下劃線，如此類推。他伸伸懶腰，把各章節頁數找一下，做了一個目錄並逐個改好頁眉和章節末尾，又上網看看 MLA 格式的要求，幫你改好。最後帶着詛咒的心情熬夜一個一個的查了人名，做了索引。
來到 TeX ，你寫文章的時候，寫到大章節，就標記一下，這是大章節；到了人名，再標記一下，這是人名。最後軟件會按照你的構想把需要的樣式排出來。

h3. 後期調整

回到你和祕書那個 case 。
說不定過了兩天，你又不滿意了，於是對祕書說：小祕，我看小日本的花園明朝體挺漂亮，你給我把正文和小章節換一下，還有開本改成 B5 ，參考文獻格式換哈佛。
於是祕書抓狂了。字體全部要換，目錄、索引、參考文獻都要重做……
如果你沒有祕書，抓狂的就是你自己。
所以 Word 和 InDesign 的用戶多半不能對美過於執着，又尤其不能有千變萬化的心情和設計。當然，現在 Word 的宏是不錯的，有些東西可以比較方便的批量處理，不至於像前面的那位抓狂祕書那麼辛苦，比如目錄和索引都是可以自動的。不過前提是你得是 Word 高手，而成爲 Word 高手的人不多於 TeX 高手，就好像高中數學聯賽國三 [1] 得主不比數學博士多。

h3. 猴子偷玉米的學習與使用方式

在 Word 或 InDesign 中，如果你掌握了某個排版訣竅，爲了保證以後會用，應當常拿出來用用，不然很快就忘記了。
在 TeX 中，遇上排版難題時，你只要找到解決方法，在導言區做一個定義，默默記住這個定義，然後就忘掉他吧。
Knuth 說 TeX 保留了當排版技工的樂趣，我要加上，他同時也消除了重複排版相似內容的枯燥。
去做偷玉米的猴子吧。如果怕玉米掉地上找不到，在導言區寫好注釋，做好備份，萬事無憂。當然了，如果你不寫注釋，自己又忘了，那我沒辦法幫你。養成良好的習慣對編程很重要， TeX 是文學編程，當然也需要一些編程的思想和習慣。

h3. Device Independent

Device Independent 本來是形容 TeX 的編譯結果 dvi 文件。不過對於我們用戶來說，又有不同意義。
現在平板電腦流行， Windows 的地位受到多方挑戰，用戶往往經常轉戰多個平臺。如果使用其他商業軟件，難免會在某些平臺下不好書寫。 TeX 就不存在這個問題，他是文本文件，隨意編輯。平時我們可以不裝他，衹有寫完了編譯的時候纔裝。
Device Independent 還有一個意義，即，我們可以用任何自己覺得舒服的文本編輯器去處理他，而不必忍受略慢的 Word 或奇慢的 InDesign 。一臺 P3 的電腦就能滿足日常編輯需求， CPU 神馬的等編譯時再說吧。

h3. 乾淨的文件

Word 和 InDesign 的文件都較髒。而 TeX 是純文本，除非你自己不講衛生，不然都很乾淨。
什麼叫髒？比如在 Word 把一段話設置爲紅色再藍色再綠色最後改回黑色，然後保存，結果文件竟然變大了，因爲程序在你變一次顏色的時候不是消掉原來的顏色再加上新顏色，而是直接加。 Word 內部也有他的標記語言，比如剛纔的修改，他可能是這樣的：文字——[紅色]文字[紅色]——[紅色][藍色]文字[藍色][紅色]——[紅色][藍色][綠色]文字[綠色][藍色][紅色]——[紅色][藍色][綠色][黑色]文字[黑色][綠色][藍色][紅色]。所以你越改動，文件就越大。

h3. 擴展性

TeX 是開源軟件，衹要水平夠，你可以用來排任何古怪但有規律的東西，製作任何宏包。
換句話說，沒有解決不了的問題，只有解決不了問題的人。
當然了，如果不是高手，很難搞定一些困難的問題。

h3. 縮寫

好吧，其實 TeX 也可以像 html 有 CSS 那樣偷懶的，那就是用戶自定義。你可以把一長串命令定義爲一個斜杠加一對大括號再加兩個字母。
當然前提是你會定義，而且要定義。

h3. 裝逼

如果要找出世界上最適合裝逼的軟件， TeX 自然排名第一。原因是他的用戶基本上全都是學界裏的人，特別西方理工科語境下，如果一個人說不知道 TeX ，可以斷定他的文憑不高於本科。

h2. TeX 的「競爭對手」

雖然已經羅列了 TeX 的優點，不過還是稍稍對比一下好了。

h3. 方正書版

方正書版擁有很多 TeX 的優點。他是中國排名第一的排版軟件，也是國產軟件的佼佼者。方正書版對古籍排版很有一套，很多東西的實現相當完美，很多情況甚至優於 TeX 的現有宏包，而且發排速度飛快，程序也比較清爽。那爲什麼我們還要研習 TeX 呢？
首先，雖然 TeX 諸多不完善而書版諸多完善，但他開源，所以慢慢搞還是能解決的，而書版如果沒有某個功能，就衹好乾瞪眼。
其次，用 TeX 有機會接觸到更多較底層的東西（開源嘛），學習更多知識，增強排版能力，鍛煉堅強心性。書版不會。
第三， TeX 免費，書版最新的破解版已是十年前的了， 2008 版價格爲 6460 人民幣（你沒看錯），自己掏腰包不實際，但舊版不支持 unicode 。
第四， TeX 跨平臺。當然這優勢不算很明顯，因爲除了調試期間沒人整天編譯，而書版也是文本文件。
第五， TeX 社區活躍，書版除了 CPC 和方正自己的論壇，幾乎沒人討論。
第六， TeX 精度更高。跟 TeX 比精度那是找死。
第七， TeX 雖然設字體很麻煩，還是比書版好些，不用找後端字體。

h3. Adobe InDesign

InDesign 也是業內知名軟件，而且從「排出來」的角度來講，無所不能。但我就是不想用。
慢。 Adobe 沒有不慢的。
弱爆了的批量操作。 WYSIWYG 的缺點。
商業化。他不會讓你接觸底層的東西，也不會理你的小眾需求。然後你還要找破解。
見鬼了的源文件。書版還能直接用文本編輯器編輯， InDesign 必須用他自己來編輯。

h3. Word

這貨不是排版軟件，你有這功夫折騰 Word 那風騷的時濃時淡的墨色、時大時小的行距，幹嘛不用 Powerpoint 或者 Photoshop 來排書？
雖然很多人喜歡拿來比，不過我認爲沒意義。還不如對比 Word 和 AutoCAD 呢。

h2. 歧途

TeX 是我見過學習歧途最多的軟件——可能是開源而且龐雜的緣故罷？姑且羅列幾條。

h3. 發音

TeX 的發音彷彿世界難題一樣，總是要討論一番。其實很簡單，音標是 [tɛx] 。我看到學過英語的中國朋友在後排舉手，表示不認識這個 [x] ，藉此斷定我老人家的音標寫錯了。
我老人家怎麼會寫錯呢，是你英語老師沒學過音標週期表 IPA 啊。比如他一定不懂 [h] 和漢語拼音的 h 的輔音部分發音上的區別。事實上， [x] 的發音就個漢語拼音的 h 的輔音部分完全相同。
下次別讀成 [tɛks] 啦！
不知道爲什麼現有的中文文檔都講不清這個問題，而且還擬音爲「泰喝」，兩個字都錯在元音。外國人看見了，一定會說：「中國人這啥耳朵呢。」

h3. TeX 很難

如前所述，對個性不強的人來說， TeX 的難度基本上是體系混亂造成的。基本功能的實現比 html 還簡單。
本文的一個目的是告訴你， TeX 東亞化確實很難，而西化很簡單。

h3. 還是學不會

TeX 也許跟許多用戶所熟悉的體系非常不同，故而不易掌握。
沒關係，一次學不會，刪掉，半年後再學學，再刪掉，再等半年一年。
不單是 TeX ，很多事都可以用這種手段處理。

h3. TeX 很優雅

編程沒有什麼優雅不優雅的，又不是編曲。程序猿所謂的優雅就是輕鬆且代碼整齊，源文件乾淨無污染。
所以不要問「爲什麼我不優雅」，也許你已經優雅了。

h3. 高手纔能用 TeX 排版出複雜 fancy 的東西

學了就是高手。
當然前提是你智商沒問題。
大學都考不上就算了。

h3. 離開 WinEdt/TeXworks 就不會用 TeX 

這是 CTeX 用戶容易犯的毛病，因該發行版對二者的設置很好，又不去教用戶如何進一步設置。
這個問題我會在下一部分的「編輯器」小節談到。

h3. 使用他人模版

你妹的模版，初學者絕對不該使用！一個模版往往包含將近十個宏包，新手不亂完纔怪！
別人的模版是熟練者需要應付不同格式，或者是製作模版時偷構思用的！

h3. 概念混淆

網上經常看到自稱用了將近十年 TeX 的，卻搞不清發行版、引擎、編輯器、宏包之間關係。老實講這種人該用商業軟件，而且實在不適合做研究。

h2. 入門

h3. 幾個入門文檔

"大家來學 LaTeX":http://cle.linux.org.tw/~edt1023/tex/latex123/node1.html ，臺灣李果正撰，雖然對中文支持的討論比較過時，不過 LaTeX 的基礎都已經覆蓋，讀完可以寫論文了。這裏給出的是網頁版，也有 PDF 版的。
很多人認爲 "lshort":http://mirrors.ctan.org/info/lshort/english/lshort.pdf 或其中文版 "lshort-zh-cn":ftp://ctan.tug.org/tex-archive/info/lshort/chinese/lshort-zh-cn.pdf 也不錯，個人看了覺得廢話太多，僅僅最後一章有意思。
"lnotes":http://www.dralpha.com/zh/tech/lnotes.pdf "lnotes2":http://www.dralpha.com/zh/tech/lnotes2.pdf 也非常推薦，他還介紹了 TeX 的史前史。作者署名包太雷，個人判斷出生時間不晚於 1970 年，因爲他竟然用「馬尾巴的功能」 [2] 的典故。文章風趣詼諧，與李果正版有一定互補性，而且他排得較 fancy 。
本來入門文檔不需要看太多，但是 TeX 有很多基本概念如果你沒接受的話是不會入門的，多讀幾本入門文檔有助於把這些概念灌入大腦。

h3. The TeXbook

Knuth 寫給 TeX 初學者的書，但不建議直接就讀他。官方有源碼但沒有編譯好的，不過中國有大把多編譯好的，甚至還有中文版。
該書也被廣大低手視爲「傳說中」的書，其實沒這麼恐怖。不關注公式編輯的，可以讀一下 10-15 和 20-25 這些章節，重點理解盒子。
閱讀此書對進一步理解 TeX 宏包中的命令以及製作宏包有很大作用，適合對美有獨特追求的人。

h3. 方正書版的入門文檔

看這個不會直接有助於學習 TeX ，但可以瞭解中國的版心、行距等方面的習慣。

h3. 其他文檔

基本上，用到什麼就讀到什麼文檔，這是開源軟件亙古不變的道理。

h3. log

編譯如果出錯， log 往往能給予極大提示。

h2. 環境

h3. 引擎

這個或許應該放到大章節來講，不過 "CTAN":http://www.ctan.org/topic/engine 有詳細的列表，看來不必了。這裏重點說一下我所關注的。
Knuth TeX: 原版，由於 Knuth 本人也對他進行了封裝，這個引擎似乎不存在。
pdfTeX: 顧名思義，直接轉成 PDF 。
Omega: 看名字就不同。他主要是爲中日韓蒙滿等特殊文字走向而開發的，不過已經停了。
XeTeX: 對字體很有一套，編譯時後臺直接把中間產物 xdv 轉成 PDF ，所以較方便。
pTeX: 日本引擎，對直排沒需求的沒必要折騰。
LuaTeX: 吸收 pdfTeX 和部分在 Omega 基礎上製作的 Aleph ，支持直轉 PDF 和方便的字體，但直排不行。還有 Lua 是腳本語言，速度差點。

h3. 包

Plain TeX: Knuth TeX 封裝成包。他的相關知識掌握後不會過期，且在所有 TeX 引擎上均能使用。他比較繁瑣且內建功能少，不過學會了之後你的知識不會過期。
LaTeX: 主要是加了文檔類，並留下很好的發展空間。他友好很多，認可度很高，知識保質期也很長。宏包多，非常實用。
ConTeXt: LaTeX 內核精煉，功能實現大量依賴宏包，而 ConTeXt 是自身強大，以避免宏包衝突的問題——強大得有點像商業軟件，不過人家是免費開源的。討厭的是他的最新版 MkIV 跑去用 LuaTeX 了，搞得直排中文沒法排。現在純 TeX 入門教材基本很難找到，而 ConTeXt 的命令從外觀上跟 LaTeX 有些差距，新手可能有些不適應。
（這裏說的是主流包了，還有很多小包，是擴展了大包的包了。）

h3. 編譯方式

基於不同的引擎（甚至大型的包），有各種不同的編譯方式。下面討論比較重要的一些編譯方式。
Plain TeX
LaTeX
pTeX/pLaTeX/upTeX/upLaTeX/epTeX/eupTeX: pTeX 系，加 u 的表示 unicode, 帶 La 的表示支持 LaTeX 的命令，帶 e 的是 e-TeX 的後代。
pdfTeX/pdfLaTeX: pdfTeX 系。前面介紹的方式除了帶 e 的，都用 Knuth TeX 編譯，不支持一步到位轉 PDF ，這個支持。
MkI/MkII/MkIII/MkIV: ConTeXt 分別搭上 Plain TeX, pdfTeX, XeTeX, LuaTeX 。XeTeX/XeLaTeX: XeTeX 系。
LuaTeX/LuaTeX-ja: LuaTeX 系。 LuaTeX-ja 通過宏包的方式支持部分 pTeX 命令和文檔類。
我的看法： LuaTeX 目前穩定性有待提高且無法搞直排，因此傾向於使用 upLaTeX 和 XeLaTeX ，兼容性和穩定性擺在那裏。當然也可以用 XeTeX 跟 ConTeXt 的結合體，再或者 eupTeX 。

h3. 發行版

糾結這問題的新手居多。實際上沒什麼好糾結的，最多是配好醬油蔥蒜的豬肉和帶毛豬肉的區別，反正都是煮了喫。發行版的目的只不過是使用時不用老下載、安裝宏包而已。
目前 Windows 下較常用的發行版有 TeX Live, MiKTeX, W32TeX 。其他多是衍生物。
TeX Live: 一個宏偉的跨平臺發行版，很大，很全，安裝很簡便，適合新手—— Live 都這樣嘛。
MiKTeX: 也很大很全，好多人都根據他來弄發行版。
CTeX: MiKTeX 的基礎上爲不懂編程的菜鳥做了一些設置（比如把文本編輯器上的編譯按鈕配置好），添加了中國特色。
W32TeX: 小鬼子的作品，發行版裏的帶毛豬肉，安裝要定義 path ，沒有整體打包下載，東西也不齊。但體積不大，且日本人討論時一般喜歡以這貨爲例，適合二鬼子和需要日本宏包的。
MTeX: 一中國人反思各發行版不夠便捷傻瓜而製作，基於 W32TeX 。小巧，自動化程度高，加入了別人有但 W32TeX 沒有的飛行安裝，還內建一些小工具，但目錄結構不同於 W32TeX 。
以上發行版的完整版都包含主要引擎，但宏包或有欠缺。
我的看法：上手用 TeX Live ，學日本或熟練各種配置了用 W32TeX 。
其他發行版見 "CTAN":http://www.ctan.org/topic/distribution

h3. 編輯器

糾結這問題的絕對從未眞正編程（不過話說回來如果有人從來衹用 Delphi 那種方式來編程，還眞可能不懂）。那些叫囂一定要用某某某的，大概沒怎麼接觸過文本編輯器。事實上，任何一款合格的文本編輯器都可以編輯並設置編譯。比如常見的 Vim, Emacs, SciTE, Notepad++, EditPlus, EmEditor, UltraEdit, AkelPad... 考慮到代碼高亮問題，建議使用已有 TeX 高亮的編輯器，省得還要自己寫高亮。順便說一下一個比較特殊的， LyX ，一個 WYSIWYM 的編輯器，也許新手會喜歡？
日文的 "TeX Wiki":http://oku.edu.mie-u.ac.jp/~okumura/texwiki/ 裏有個「統合環境」，介紹了主流開源文本編輯器的配置方法。
本文給一個該站沒有的例子—— EmEditor 下 upLaTeX 一次性二步編譯爲 PDF：
（注意，直接使用本例子僅需電腦常識，但如要活用，也許有一點點 cmd/bat 使用經驗會比較好。）
先寫好一個 bat 文件放在 upLaTeX 的文件夾裏——比如 W32TeX 就是在他的 bin 文件夾。（其實我的 bat 是抄襲 W32TeX 自帶的 pdfplatex.bat 。）
{% highlight bat linenos %}
@echo off
uplatex -synctex=1 -jobname="%~n1" -kanji=utf8 -guess-input-enc "%1" && dvipdfmx "%~n1"
{% endhighlight %}
再在 EmEditor —工具—外部工具—自定義工具下，標題隨便寫，命令寫剛纔那個 bat 的完整路徑，比如我的就是 @D:\W32TeX\bin\pdfuplatex.bat@ ，自變量 @$(Path)@ ，原始目錄 @$(Dir)@ ，如果需要看 log 就勾選 「使用輸出窗」並把編碼設爲 UTF-8 。
upLaTeX 設定相對比較複雜，因爲他編譯成 PDF 需要兩步且有一堆參數而且 EmEditor 不是直接調用 cmd 。當然也可以使用調用 cmd 然後執行寫入 bat 的那一串命令的辦法。
由於 TeX 的高級用戶基本上都是 geek ，而 geek 都喜歡折騰文本編輯器，也有很多專門針對 TeX 開發的文本編輯器，比如 WinEdt, WinShell, Kile, TeXstudio, TeXnicCenter, TeXworks, SWP, Bakoma 等等，不過其中有的是商業軟件。不過我個人的觀點還是用自己喜歡的 general 文本編輯器，而非專門爲了 TeX 找，免得不習慣。
如果要選一款眞正終極形態的 TeX 編輯器， Emacs+AucTeX 這個組合大概能獲得第一名（至於我常用的 EmEditor 則排到十名以外）。這貨雖然配置起來巨麻煩，不過有人做了 Windows 下的整合版： "Win32-emacs-auc­tex":http://www.ctan.org/tex-archive/support/win32-emacs-auctex 。只要是好東西，開源世界不會讓你失望。

h2. 推薦宏包

宏包者， @\usepackage{}@ 。兩個大括號之間填的內容決定全文能用什麼命令，不得不說宏是個很神奇的東西。

h3. geometry

進一步控制整個頁面佈局的經典宏包，主要是尺寸方面的設計。

h3. fancyhdr

製作很 fancy 的頁眉和頁腳。能基於頁面奇偶性來設置不同頁眉、頁腳，但奇偶性必須開啟 documentclass 中的 twoside 選項。

h3. color/xcolor

一本書都沒別的顏色嗎？
如果是實際印刷，多色較貴，一般用單色。但電子版多幾種顏色更好，就像我們寫代碼喜歡做高亮。

h3. xeCJK/CJK

雖然存在問題，但是既然做中文的，用用 CJK 能解決不少問題。

h3. sidenotes/marginnote

LaTeX 內部有一條叫 @marginpar@ 的命令，可以製作邊注。
但 marginpar 是浮動對象，所以就有了 marginnote 宏包。同時添加了一串功能。
不過 marginnote 包在我的電腦上很詭異，比如我用 geometry 宏包規定所有 marginpar 保持 asymmetric 狀態，也就是說，雖然我用的是 twosided 的書籍格式，但 marginpar 的位置不分奇偶，永遠在同一邊。實際使用發現，這些 marginpar 對象還是會跑到另一邊。
而 sidenotes 又是另一個宏包，他基於 marginnote 但可以在邊注中加入圖片、表格。

h3. titlesec, titleps, titletoc

默認的目錄和章節號是英文的，用 CTeX 的話是簡化字的。
自己動手一下，自然豐衣足食。
不過我沒找到把章節設爲「某某第一」這種格式，用 after 的話章節型的 after 會跑到下一行去，段落型經常不見。

h2. 字體

字體是 TeX 一個重大問題，目前的解決方案都較差。

h3. dvipdfm/dvipdfmx
先說第一種，也就是較老的幾個 TeX 分支的情況：會卡在 DVI 轉 PDF 一步。主要是 dvipdfm/dvipdfmx 中的設置太麻煩了。針對這個問題， W32TeX 下有 "PXchfon":http://zrbabbler.sp.land.to/pxchfon.html 和 "PXwjmap":http://zrbabbler.sp.land.to/data/pxwjmap.zip 。
這類原始的方式讓我想到了方正的 CID 字體，不過方正如果用他自己的字體還是很簡單的。

h3. LuaTeX

由於他的直排比較弱，我還沒有嘗試。

h3. 中文字體

這問題是個重點——如果你是比較 demanding 的人。
方正字體：中國大陸最有實力的是方正，他的字體肯定滿足簡化字需求，且有大量 GBK 字體和一些大字符集字體。問題是他的字體普遍難看。本來方正可以做好看的，偏偏不務正業，整天搞什麼字跡字體。隨便找個刻本， auto trace 一下，再修基線，自然不難看，但方正就是不做。
日本字體：日本字體最漂亮，但缺字情況較多（還好繁體缺字較少），而且有些字更符合他們的書寫習慣，考慮到其他新字形更糟糕，也無所謂了。日本字體多，但除了免費字體往往不易獲得，比如我很想用的欣喜堂字體。
Adobe 字體：比較專業，功能豐富，不過注意版權，還有美感方面差一點。
民間字體：就是一些個人製作的字體，比如康熙字典體之類。就說康熙字典體好了，基線不行，直排尚且宛如狗啃，橫排更是不可能。民間字體當然也有他的用途，比如做封面、做 logo 之類。排文章的話， TeX 搭上粗製濫造的字體，那還不如用 Word 。
臺灣字體：多是大五碼的，容易缺字。最值得關注的是中研院那套，但一套字體一大堆文件，不很好用。
其他亞洲字體：韓國、越南都有漢字字體，比日本還詭異，我是不怎麼敢用。


h3. XeTeX/XeLaTeX 直排字體

XeTeX 系最大的特點是字體變得很簡單。不過這句話在西文世界或許很管用，中文世界就不那麼正確了。
要在 XeTeX 直排，必須是支持 vertical 命令的字體，一般需要 otf 。但是標點需要完美的 vert 命令，而一般字體不完美。
解決方案：
一、用強大的字體，如 AdobeSongStd-Light.otf ，支持的命令更加豐富，可以保持標點符號正確性。一般 otf 較好，但冒號經常不行。
二、用更複雜的命令，比如標點一律使用 AdobeSongStd-Light.otf 的標點。這個辦法需要 zhspacing 宏包，跟 xeCJK 有點衝突。
三、我的選擇：用冒號有問題的 otf ，然後冒號使用 AdobeSongStd-Light.otf 。缺點是冒號衹好定義爲 @\：@ 了。

h3. 一個細緻的問題：直排破折號

您老該不會這篇文章有稿費吧？這也寫一節？
不過眞是個問題。
破折號的編碼有好幾種，一般輸入法打出來的是 U+2014 ，這也是比較正確的破折號，但他在直排情況下往往顯示爲橫的。
然後有個專門用於直排的破折號， U+FE31 ，但源文件肯定不會這麼寫。
所以隆重推薦 U+2500 ，要橫就橫，要豎就豎。
最後順帶提一下 U+2015 ，也是橫豎都正確的，但橫排時兩根破折號之間有明顯縫隙，直排下看不出。
不過字體如果使用了 @script=hani@ 屬性，則 U+2014 纔是正確的，而 U+2500 不可見。

h2. 一些吐槽

關於缺點方面以前吐槽了很多，但還是要把吐槽進行到底。

h3. 語文不及格的理科生 CJKnumb.sty/xCJKnumb.sty

CJKnumb 是把 TeX 裏自動排的數字轉化爲漢字數字的工具，比如頁碼、章節號這些都會用到他。
無奈編寫者是理科生，用戶也以理工科的爲主，對漢字上的一些習慣顯然瞭解不足。
於是比如 105 ，使用 CJKdigits/xCJKdigits 命令時，本應寫作「一〇五」，但他寫作「一零五」。這算是個常見錯字，咬文嚼字還把他列爲某年的十大錯字。當然了，「〇」很難看，疑似日本字。不過他已得到中日臺三地承認，這是寫給大家的軟件，就該使用標準寫法。
CJKnumb 由於編碼問題比較難改，而 xCJKnumb 使用 unicode ，可以直接看到他的用字。但是改了之後 xCJKnumb 命令會出錯，把「一百零五」寫作「一百〇五」，如果兩個命令都需要，最簡單的辦法是把這個宏包拆開兩個，美觀的話可以自己再仔細研究一下……嘛，眞空虛。
話說我排文章的時候用 fancyhdr 等宏包搞得太 fancy 了（ fancy 到文字先 vert 再轉 90 度再 landscape 然後在看似頁邊實爲頁眉和頁腳的地方打上頁碼），頁碼逢十出錯，十全部變成無，所以我把他的 null 也一起改成〇。
順帶一提， pTeX 有個 @kansuji@ 命令，顧名思義，「漢數字」。人家就沒搞錯。

h3. 你妹的全角冒號

全角冒號，本來直排和橫排沒差，但是 XeTeX 系統下用 vert 之類的字體命令竟然會轉成橫着的兩點，無比傻逼。
但 pTeX 系下使用 tarticle 則正確無誤。你妹的。
無敵的 AdobeSongStd-Light.otf 沒有這問題。問題是他不好看。

h3. pxchfon 複雜化

本來 pxchfon 是一款 W32TeX 下方便搞字體的宏包，但實際安裝非常繁瑣，要自己創建文件夾，而且都放得很深。竟然還要裝 otf 宏包，而且還是不行，最後把字體直接放到 W32TeX 的字體目錄纔搞定（經常重裝，不搞映射）。

h3. 一馬 N 伕

ulem 是個鼓搗下劃線的宏包。但在中文環境下不自動折行。
CJKulem 提供了中文環境下劃線文字的自動折行，運行需要 ulem 。不過 XeTeX 直排時基線是錯的，所以劃線的位置也是錯的。況且他的直排在左邊，不在我喜歡的右邊（我的習慣很日本是不是）。
udline 是下劃線類宏包的最終形態，不但有下劃線，還有上劃線，而且在 pTeX 環境下自動適應爲下劃線在右側。但是在 XeTeX 下容易有點不整齊，不過應該不是宏包的錯，而是 XeTeX 的問題。
這裏順便提一下一個叫藤田的小鬼子的宏包，他把波浪線、直線分開，又把縱橫分開，搞了一堆宏包。實際測試沒一個好使的，全都無法折行。這廝在世紀之交寫了一堆宏包，之後就沒更新了。雖然他的一些演示文檔看起來還不錯，不過我實際使用發現絕大多數宏包都很垃圾。無法折行的劃線宏包，嚴重變更頁面佈局的頭注宏包，還是無法折行的割注宏包。唯一不錯的就是訓點文宏包，但我又不是日本人我排個毛線的訓點啊。自己用盒子寫個命令就可以排訓詁了。
從以上情況來看，似乎在 XeTeX 下都沒有可用的宏包，不過其實 ulem 有個命令， @\ULdepth@ ，可以設置下劃線的位置。當這個值設爲負時，下劃線的位置就會跑到基線右邊。（所以說用戶的平面幾何一定要及格，每次！）但是， @\ULdepth@ 衹處理下劃線和下劃雙線，不處理波浪線。
CJKfntef 這個宏包提供了更多的自定義可能，不過命令也無限趨近於直接用 TeX 命令了。索性不要用，上網搜索一個別人寫的，自己加粗一些，用大波浪。
另外，我還需要加重號，這在日文裏是 kenten ，「圏点」。用大波浪的代碼改了改，參數沒控制好，加重沒和字一一對應，懶得多嘗試了，反正有宏包用。一個簡單的解決方案是 BXptool ，霓虹人奧村開發的東西。還好他的網站有樣張和樣式代碼，不然還要猜。不過他的加重號是點，這我很不滿意，就打開他的源文件給改成頓號了（還是很日本），順便調整了一下出現的位置。
本來應該一個宏包解決的事情，竟然試了十多個宏包。

h2. 有用的網站

"Google":http://google.com 使用開源軟件時，百度壓根不行。搜索結果中如果有 pdf ，往往是宏包文檔或樣張。
"CTAN":http://www.ctan.org/ "TUG":http://www.tug.org/ 宏包、文檔、發行版大全。當然，不會太全。
"LaTeX 官網":http://www.latex-project.org/
"StackExchange":http://tex.stackexchange.com "StackOverflow":http://stackoverflow.com "LaTeX Community":http://latex-community.org/ 相當於 TeX 的百度知道。
"Wikibooks - LaTeX":http://en.wikibooks.org/wiki/LaTeX
"TeXdoc online":http://texdoc.net/
"CTeX":http://ctex.org 提供發行版，而且論壇可提問。 "Online Documents":http://www.ctex.org/OnlineDocuments 也可以用。
"LaTeX 命令速查手册":http://www.tongji.edu.cn/~yin/cn/latexfast.html
"LaTeX 編輯部":http://zzg34b.w3.c361.com/index.htm 「 LaTeX2e 完全学习手册」一書的相關網站，有一些資料。
"TeX Wiki":http://oku.edu.mie-u.ac.jp/~okumura/texwiki/ 一個日本人寫的 Wiki 式網站。
"電脳世界の奥底にて":http://zrbabbler.sp.land.to/index.html 雖然日文的東西我能看懂的不到三成，不過眞有點用。
"字客網":http://www.fontke.com 本來這種網站不該推薦，不過他的字體眞的挺多。






fn1. 聯賽頗複雜，先初賽，再省級聯賽，各省省一的前若干名可參加全國聯賽，全國參加人數約二百。聯賽有特定的題型和知識範圍，就算給你牛頓、愛因斯坦的智商也很難不經培訓就獲得國三。

fn2. 典故來自 1975 年的電影「決裂」，裏面有個南方的大學，學生想瞭解養牛的農技，但教授堅持學術，講授南方較少的馬，而且電影爲了諷刺教授，專說這名教授在講「馬尾巴的功能」。電影的思想是極左的，認爲大學不如農田，學術不如經驗，「馬尾巴的功能」當然不如如何養牛重要——其實這些學生根本不該上大學，職高比較適合他們。這種思想在改革開放後受到完全的否定，因此其後觀看此片的人極少。筆者也是因一個偶然的機會看到了電影的大綱，纔下載來看的。在此筆者順帶將此片推薦給青年即外籍中國史研究者，相信大家一定會喜歡。